using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

//1) Определить иерархию и композицию классов (в соответствии с вариантом),
//реализовать классы.Если необходимо расширьте по своему усмотрению
//иерархию для выполнения всех пунктов л.р.
//Каждый класс должен иметь отражающее смысл название и
//информативный состав. При кодировании должны быть использованы
//соглашения об оформлении кода code convention.
//В одном из классов переопределите все методы, унаследованные от
//Object.

//2) В проекте должен быть минимум один интерфейс и абстрактный класс. 
//Использовать виртуальные методы и переопределение.

//3) Сделайте один из классов sealed;

//4) Добавьте в интерфейсы (интерфейс) и абстрактный класс одноименные 
//методы. 
//Дайте в наследуемом классе им разную реализацию и вызовите эти методы.

//5) Написать демонстрационную программу, в которой создаются объекты 
//различных классов. Поработать с объектами через ссылки на абстрактные 
//классы и интерфейсы. В этом случае для идентификации типов объектов 
//использовать операторы is или as.

//6) Во всех классах (иерархии) переопределить метод ToString(), который
//выводит информацию о типе объекта и его текущих значениях. 

//7) Создайте дополнительный класс Printer c полиморфным методом 
//IAmPrinting( SomeAbstractClassorInterface someobj). Формальным
//параметром метода должна быть ссылка на абстрактный класс или наиболее 
//общий интерфейс в вашей иерархии классов. В методе iIAmPrinting
//определите тип объекта и вызовите ToString(). В демонстрационной 
//программе создайте массив, содержащий ссылки на разнотипные объекты
//ваших классов по иерархии, а также объект класса Printer и последовательно 
//вызовите его метод IAmPrinting со всеми ссылками в качестве аргументов.

//Вариант 11: Автомобиль, Поезд, Транспортное средство, Экспресс, Двигатель, Вагон.
namespace Lab5
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                Organization organization = new Organization("Meow Intertaiment", 12345);
                Car a = new Car(new CarE(), 220, 200);
                Train b = new Train(new TrainE(), 220, 200);

                //--------------------------Проверка на ошибочки--------------------------------

                // Organization a1 = new Organization("", 123); //- отсутствует имя
                // Car c = new Car(new CarE(), -1, 200); // - масса меньше 0
                // Train d = new Train(new TrainE(), 220, -1); // - 0 вагонов 

                //------------------------------------------------------------------------------

                organization.Add(a);
                organization.Add(b);
            }
            //отлавливаем ошибки разных типов
            catch (Organization_Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message} in Class {ex.ErrorClass}, Name: {ex.ErrorName}, ID: {ex.ErrorId}");
            }
            catch (Vehicle_Exсeption ex)
            {
                Console.WriteLine($"Error: {ex.Message} - {ex.ErrorWeight}");
            }
            catch (Custom_Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}, in Class {ex.ErrorClass}");
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Console.WriteLine("[finally]");
            }
            Console.ReadKey();
        }
    }
}
